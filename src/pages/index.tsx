import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { Web3Button } from "@web3modal/react";
// importación del archivo con la información del contrato
import contractInformation from "@/utils/contract.json";
import {
  useContractRead,
  useContractWrite,
  useContractEvent,
  useAccount,
} from "wagmi";
import { useState, useEffect, FormEvent } from "react";
import { sepolia } from "wagmi/chains";

const inter = Inter({ subsets: ["latin"] });
const customChainId = Number(process.env.NEXT_PUBLIC_CHAIN_ID)

export default function Home() {
  const [nameContract, setNameContract] = useState("");
  const [addressConnected, setAddressConnected] = useState<
    null | `0x${string}`
  >();
  const { address } = useAccount();
  // conexión de lectura con contrato
  const contractRead = useContractRead({
    address: contractInformation.address as `0x${string}`,
    abi: contractInformation.abi,
    functionName: "getName",
    chainId: sepolia.id,
    // account: address,
    onSuccess(data: string) {
      // asignación de variable de contrato a hook en react
      setNameContract(data);
    },
  });

  // conexión de escritura con contrato
  const contractWrite = useContractWrite({
    address: contractInformation.address as `0x${string}`,
    abi: contractInformation.abi,
    functionName: "setName",
    chainId: sepolia.id,
    onSuccess(data) {
      console.log(data);
    },
  });

  // conexión de lectura de evento
  useContractEvent({
    address: contractInformation.address as `0x${string}`,
    abi: contractInformation.abi,
    eventName: "newName",
    chainId: sepolia.id,
    listener(log) {
      console.log(log);
      contractRead.refetch();
    },
  });

  const updateName = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const element = (e.target as HTMLFormElement).elements["name"];
    if (element.value)
      contractWrite.write({
        args: [element.value],
      });
    element.value = "";
  };

  useEffect(() => {
    setAddressConnected(address);
  }, [address]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <h1>
          Mi proyecto de frontend
          {nameContract == "" ? " web3" : ` web3, saludos de ${nameContract}`}
        </h1>
        <Web3Button />
        <form onSubmit={updateName}>
          <label htmlFor="name">Nombre:</label>
          <input type="text" id="name" name="name" required />
          <button disabled={!addressConnected} type="submit">
            Actualizar
          </button>
        </form>
      </main>
    </>
  );
}
